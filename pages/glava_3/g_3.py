import streamlit as st

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ì–ª–∞–≤–∞ 3", # –¢–µ–∫—Å—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
    page_icon='üìï',       # –ò–∫–æ–Ω–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
    layout="wide",        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initial_sidebar_state="collapsed",  # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
)

# –¢–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.columns(3)[1].header("üë©üèª‚Äçüíª–ü—Ä–∏–º–µ—Ä—ã –≥–ª–∞–≤—ã 3")

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
cont_1 = st.container(width=300)
with cont_1:
    # –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è —Å–ø–∏—Å–æ–∫
    options = st.selectbox("–õ–∏—Å—Ç–∏–Ω–≥–∏ –≥–ª–∞–≤—ã 3",
        ("–õ–∏—Å—Ç–∏–Ω–≥ 3.1", "–õ–∏—Å—Ç–∏–Ω–≥ 3.2", "–õ–∏—Å—Ç–∏–Ω–≥ 3.3", "–õ–∏—Å—Ç–∏–Ω–≥ 3.4",
         "–õ–∏—Å—Ç–∏–Ω–≥ 3.5", "–õ–∏—Å—Ç–∏–Ω–≥ 3.6", "–õ–∏—Å—Ç–∏–Ω–≥ 3.7", "–õ–∏—Å—Ç–∏–Ω–≥ 3.8",
         "–õ–∏—Å—Ç–∏–Ω–≥ 3.9", "–õ–∏—Å—Ç–∏–Ω–≥ 3.10", "–õ–∏—Å—Ç–∏–Ω–≥ 3.11", "–õ–∏—Å—Ç–∏–Ω–≥ 3.12",
         "–õ–∏—Å—Ç–∏–Ω–≥ 3.13", "–õ–∏—Å—Ç–∏–Ω–≥ 3.14", "–õ–∏—Å—Ç–∏–Ω–≥ 3.15", "–õ–∏—Å—Ç–∏–Ω–≥ 3.16",
         "–õ–∏—Å—Ç–∏–Ω–≥ 3.17", "–õ–∏—Å—Ç–∏–Ω–≥ 3.18", "–õ–∏—Å—Ç–∏–Ω–≥ 3.19", "–õ–∏—Å—Ç–∏–Ω–≥ 3.20",
         "–õ–∏—Å—Ç–∏–Ω–≥ 3.21", "–õ–∏—Å—Ç–∏–Ω–≥ 3.22", "–õ–∏—Å—Ç–∏–Ω–≥ 3.23", "–õ–∏—Å—Ç–∏–Ω–≥ 3.24"
         ),
        index=None,
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç–∏–Ω–≥..."
    )

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
cont_2 = st.container()
with cont_2:
    if options is None:
        st.write('–õ–∏—Å—Ç–∏–Ω–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω')
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.1":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.1 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–Ω–æ–ø–∫–∏ primary
            bt_1 = st.button("–ü—Ä–∏–≤–µ—Ç", type="primary")
            if bt_1:
                st.write("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏–≤–µ—Ç'")

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–Ω–æ–ø–∫–∏ secondary
            bt_2 = st.button("–í—ã—Ö–æ–¥")
            if bt_2:
                st.write("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–í—ã—Ö–æ–¥'")
            else:
                st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–Ω–æ–ø–∫–∏ tertiary
            bt_3 = st.button("–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", type="tertiary")
            if bt_3:
                st.write("–ù–∞–∂–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            left, middle, right = st.columns(3)
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
            if left.button("–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞", width="stretch"):
                left.markdown("–ù–∞–∂–∞—Ç–∞ –ø—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞")
            if middle.button("–ö–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏", icon="üòÉ", width="stretch"):
                middle.markdown("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏")
            if right.button("–ö–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π", icon=":material/mood:", width="stretch"):
                right.markdown("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.2":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.2 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            import pandas as pd


            # –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö df
            @st.cache_data
            def get_data():
                data = {'–ò–º—è': ['–°–µ—Ä–≥–µ–π', '–ú–∏—Ö–∞–∏–ª', '–ê–Ω—Ç–æ–Ω', '–°—Ç–µ–ø–∞–Ω'],
                        '–í–æ–∑—Ä–∞—Å—Ç': [32, 28, 41, 37],
                        '–ì–æ—Ä–æ–¥': ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å', '–°–æ—á–∏', '–û–º—Å–∫']}
                data = pd.DataFrame(data)
                return data


            # –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è df –≤ CSV (–≤ –ø–∞–º—è—Ç–∏)
            @st.cache_data
            def convert_for_download(df):
                return df.to_csv().encode("utf-8")

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            df = get_data()
            st.write('–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ')
            st.write(df)
            # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è df –≤ CSV
            csv = convert_for_download(df)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ df
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å DataFrameüìà",
                data=csv,
                file_name="data.csv",
                mime="text/csv",
                icon=":material/download:",
            )

            st.write('–§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º')
            st.image('static/AP_400.png')
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with open("static/AP_400.png", "rb") as file:
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüåÑ",
                    data=file,
                    file_name="my_image.png",
                    mime="image/png",
                    icon=":material/download:"
                )

            st.write('–î–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª–µ')
            data = spectra_df = pd.read_csv('passengers.csv')
            st.write(data)
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ df
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª‚¨áÔ∏è",
                data=csv,
                file_name="passengers.csv",
                mime="text/csv",
                icon=":material/download:",
            )
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.3":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.3 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É
            with st.form(key='my_form'):
                # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
                name = st.text_input(label='–ò–º—è')
                age = st.number_input(label='–í–æ–∑—Ä–∞—Å—Ç', min_value=0)
                submit_button = st.form_submit_button(label='–û—Ç–ø—Ä–∞–≤–∏—Ç—å')

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if submit_button:
                st.write(f'–í–µ–¥–µ–Ω–æ –∏–º—è- {name}, –≤–≤–µ–¥–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç {age}')
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.4":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.4 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.write('–ö–Ω–æ–ø–∫–∞ - —Å—Å—ã–ª–∫–∞')
            st.link_button("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç '–ê–∫–∞–¥–µ–º–∏—è Python'",
                           "https://apython.ru")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.5":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.5 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.set_page_config(
                page_title="–î–æ–º–∞—à–Ω—è—è",  # –¢–µ–∫—Å—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
                page_icon='üë®',  # –ò–∫–æ–Ω–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
                layout="wide",  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                initial_sidebar_state="expanded",  # –†–∞—Å–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            )

            # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç - —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            pg_company = st.Page(page="pages/about.py", title="üë®‚Äçüíº–û –∫–æ–º–ø–∞–Ω–∏–∏")

            # –°–æ–∑–¥–∞—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            sb = st.sidebar
            with sb:
                # –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                st.page_link("pages/glava_3/page1.py", label="–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1", icon="1Ô∏è‚É£")
                st.page_link(pg_company, label="–û –∫–æ–º–ø–∞–Ω–∏–∏", icon="üë∑üèº")
                st.page_link("https://dzen.ru", label="–Ø–Ω–¥–µ–∫—Å", icon="üåé")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã page1.py
        st.write('–ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã page1.py')
        path_file = 'pages/glava_3/page1.py'
        file = open(path_file, 'r')
        code = file.read()
        st.code(body=code, language="python")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã about.py
        st.write('–ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã about.py')
        path_file = 'pages/about.py'
        file = open(path_file, 'r')
        code = file.read()
        st.code(body=code, language="python")

    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.6":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.6 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.badge("–≠–ª–µ–º–µ–Ω—Ç st_checkbox")
            agree = st.checkbox("–ü–µ—á–∞—Ç–∞—Ç—å", value=False)
            finger = st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", value=False)

            if agree:
                st.write("–î–∞, –ø–µ—á–∞—Ç–∞—Ç—å")
            else:
                st.write("–ù–µ—Ç, –Ω–µ –ø–µ—á–∞—Ç–∞—Ç—å")

            if finger:
                st.write("–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω")
            else:
                st.write("–ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.7":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.7 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.badge("–≠–ª–µ–º–µ–Ω—Ç st_color_picker")
            color = st.color_picker("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç", "#00f900")
            st.write("–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç -", color)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.8":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.8 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.text("–≠–ª–µ–º–µ–Ω—Ç—ã st.feedback")
            # –ü–∞–ª–µ—Ü
            st.badge("–ü–∞–ª–µ—Ü")
            sent_1 = [":material/thumb_down:", ":material/thumb_up:"]
            selected_1 = st.feedback("thumbs")
            if selected_1 is not None:
                st.markdown(f"–í–∞—à –≤—ã–±–æ—Ä: {sent_1[selected_1]}")
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            # –ó–≤–µ–∑–¥—ã
            st.badge("–ó–≤–µ–∑–¥—ã")
            sent_2 = ["1", "2", "3", "4", "5"]
            selected_2 = st.feedback("stars")
            if selected_2 is not None:
                st.markdown(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ {sent_2[selected_2]}")
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            # –õ–∏—Ü–∞
            st.badge("–õ–∏—Ü–∞")
            sent_3 = ["1", "2", "3", "4", "5"]
            selected_3 = st.feedback("faces")
            if selected_3 is not None:
                st.markdown(f"–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sent_3[selected_3]}")
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.9":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.9 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.badge("–≠–ª–µ–º–µ–Ω—Ç st_multiselect")

            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            options = st.multiselect(
                "–ü–æ–¥–±–æ—Ä –æ–≤–æ—â–µ–π –¥–ª—è —Å–∞–ª–∞—Ç–∞",
                ["–û–≥—É—Ä—Ü—ã", "–ü–æ–º–∏–¥–æ—Ä—ã", "–õ—É–∫", "–ú–æ—Ä–∫–æ–≤—å", "–ö–∞–ø—É—Å—Ç–∞"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â–∏ –≤ –ª—é–±–æ–º —Å–æ—á–µ—Ç–∞–Ω–∏–∏",
                placeholder='–ù–∞–±–æ—Ä –æ–≤–æ—â–µ–π –¥–ª—è —Å–∞–ª–∞—Ç–∞'
            )
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if options:
                st.write("–°–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä:", options)
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.10":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.10 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.text("–≠–ª–µ–º–µ–Ω—Ç—ã st.pills")

            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            st.badge("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä")
            options = ["–Ø–±–ª–æ–∫–∏", "–ì—Ä—É—à–∏", "–ê–ø–µ–ª—å—Å–∏–Ω—ã", "–ú–∞–Ω–¥–∞—Ä–∏–Ω—ã"]
            select_1 = st.pills("–§—Ä—É–∫—Ç—ã ", options, selection_mode="multi")
            if select_1:
                st.markdown(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {select_1}.")
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            st.badge("–ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä")
            option_map = {
                1: ":material/add:",
                2: ":material/zoom_in:",
                3: ":material/zoom_out:",
                4: ":material/zoom_out_map:",
            }
            select_2 = st.pills(
                "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è",
                options=option_map.keys(),
                format_func=lambda option: option_map[option],
                selection_mode="single",
            )
            if select_2:
                st.write(
                    "–í–∞—à –≤—ã–±–æ—Ä: "
                    f"{None if select_2 is None else option_map[select_2]}"
                )
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.11":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.11 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.badge("–†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏")
            genre = st.radio(
                label="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∏–ª—å–º–∞",
                options=[":rainbow[–ö–æ–º–µ–¥–∏—è]", "***–î–µ—Ç–µ–∫—Ç–∏–≤***", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∫–∏–Ω–æ :movie_camera:"],
                index=0,
                captions=[
                    "–û—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—Å—è.",
                    "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.",
                    "–û–∫—É–Ω—É—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é",
                ],
            )

            if genre == ":rainbow[–ö–æ–º–µ–¥–∏—è]":
                st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–µ–¥–∏—é")
            elif genre == "***–î–µ—Ç–µ–∫—Ç–∏–≤***":
                st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏–≤")
            elif genre == "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∫–∏–Ω–æ :movie_camera:":
                st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∫–∏–Ω–æ")
            else:
                st.write("–ñ–∞–Ω—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")

            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            st.badge("–§–ª–∞–∂–∫–∏ –∏ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏")
            # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∞–Ω—Å–µ
            if "visibility" not in st.session_state:
                st.session_state.visibility = "visible"
                st.session_state.disabled = False
                st.session_state.horizontal = False

            # –†–∞–∑–±–∏–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
            col1, col2 = st.columns(2)

            # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å —Ñ–ª–∞–∂–∫–∞–º–∏
            with col1:
                st.checkbox("–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏", key="disabled")
                st.checkbox("–†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –≤ –ª–∏–Ω–∏—é", key="horizontal")

            # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–∞–º–∏
            with col2:
                st.radio(
                    label="–°–¥–µ–ª–∞—Ç—å –º–µ—Ç–∫—É –≤–∏–¥–∏–º–æ–π üëá",
                    options=["visible", "hidden"],
                    key="visibility",
                    label_visibility=st.session_state.visibility,
                    disabled=st.session_state.disabled,
                    horizontal=st.session_state.horizontal,
                )
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.12":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.12 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.text("–≠–ª–µ–º–µ–Ω—Ç—ã st_segmented_control")

            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            st.badge("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä")
            options = ["–°–µ–≤–µ—Ä", "–í–æ—Å—Ç–æ–∫", "–Æ–≥", "–ó–∞–ø–∞–¥"]
            select_1 = st.segmented_control(
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", options, selection_mode="multi"
            )
            if select_1:
                st.markdown(f"–í—ã–±—Ä–∞–Ω–æ: {select_1}.")

            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            st.badge("–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞")
            option_map = {
                0: ":material/add:",
                1: ":material/zoom_in:",
                2: ":material/zoom_out:",
                3: ":material/zoom_out_map:",
            }
            select_2 = st.segmented_control(
                "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è",
                options=option_map.keys(),
                format_func=lambda option: option_map[option],
                selection_mode="single",
            )

            st.write(
                "–í—ã–±—Ä–∞–Ω–æ: "
                f"{None if select_2 is None else option_map[select_2]}"
            )
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.13":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.13 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.badge("–í–∏–¥–∂–µ—Ç st.selectbox —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞")
            option = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏",
                ("E-mail", "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", "–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"),
            )
            if option:
                st.write("–°–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä-", option)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            st.badge("–í–∏–¥–∂–µ—Ç st.selectbox –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞")
            option = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏",
                ("E-mail", "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", "–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"),
                index=None,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏..."
            )
            if option:
                st.write("–°–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä-", option)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            st.badge("–í–∏–¥–∂–µ—Ç st.selectbox —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞")
            option = st.selectbox(
                "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
                ["victor@mail.ru", "oleg@mail.ru", "maxim@mail.ru"],
                index=None,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ e-mail",
                accept_new_options=True,
            )
            st.write("–°–¥–µ–ª–∞–Ω –≤—ã–±–æ—Ä-", option)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
            if "visibility" not in st.session_state:
                st.session_state.visibility = "visible"
                st.session_state.disabled = False

            st.badge("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–∏–¥–∂–µ—Ç st.selectbox")
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            cont = st.container(border=True)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            with cont:
                col1, col2 = st.columns(2)

            with col1:
                st.checkbox("–°–¥–µ–ª–∞—Ç—å –≤–∏–¥–∂–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º", key="disabled")
                radio = st.radio(
                    "–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ—Ç–∫–∏ üëâ",
                    options=["–ü–æ–∫–∞–∑–∞—Ç—å", "–°–∫—Ä—ã—Ç—å", "–°–≤–µ—Ä–Ω—É—Ç—å"],
                )
                if radio:
                    if radio == "–°–∫—Ä—ã—Ç—å":
                        st.session_state.visibility = "hidden"
                    elif radio == "–ü–æ–∫–∞–∑–∞—Ç—å":
                        st.session_state.visibility = "visible"
                    elif radio == "–°–≤–µ—Ä–Ω—É—Ç—å":
                        st.session_state.visibility = "collapsed"

            with col2:
                option1 = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏",
                    ("Email", "–î–æ–º–∞—à–Ω–∏–π", "–ú–æ–±–∏–ª—å–Ω—ã–π"),
                    label_visibility=st.session_state.visibility,
                    disabled=st.session_state.disabled,
                )
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.14":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.14 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.text("–≠–ª–µ–º–µ–Ω—Ç—ã st.select_slider")

            st.badge("–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
            c = st.select_slider(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É",
                options=["–†–æ—Å—Å–∏—è", "–ö–∏—Ç–∞–π", "–°–®–ê", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                         "–§—Ä–∞–Ω—Ü–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è", "–ò—Ç–∞–ª–∏—è", ], )
            st.write("–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞:", c)

            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            st.badge("–í—ã–±–æ—Ä –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            start_color, end_color = st.select_slider(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–≤–µ—Ç–æ–≤",
                options=["red", "orange", "yellow", "green",
                         "blue", "indigo", "violet", ],
                value=("red", "blue"),
            )
            st.write("–í—ã–±—Ä–∞–Ω—ã —Ü–≤–µ—Ç–∞:", start_color, "–∏", end_color)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.15":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.15 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.text("–≠–ª–µ–º–µ–Ω—Ç—ã st.toggle")

            tog_1 = st.toggle("–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø")
            if tog_1:
                st.write("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è", tog_1)

            toggle_value = st.toggle("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è", value=False)
            # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
            if toggle_value:
                st.write("–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω -", toggle_value)
            else:
                st.write("–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω -", toggle_value)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.16":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.16 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text('–í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª st.number_input')

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª
            number = st.number_input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π",
                                     )
            if number:
                st.write("–í–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ ", number)
            st.divider()  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª
            int_number = st.number_input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
                                         value=0)
            if int_number:
                st.write("–í–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ ", int_number)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.17":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.17 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            from datetime import time
            from datetime import datetime

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text('–í–∏–¥–∂–µ—Ç –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö st.slider')

            # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
            age = st.slider(label="–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
                            min_value=0,
                            max_value=120,
                            value=25)
            st.write("–ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç- ", age)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª
            values = st.slider(label="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª",
                               min_value=0.0,
                               max_value=100.0,
                               value=(25.0, 75.0))
            st.write("–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω:", values)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
            appointment = st.slider(label="–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–µ–º:",
                                    value=(time(11, 30), time(12, 45)),
                                    format="hh:mm"
                                    )
            st.write("–í–∞—à–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:", appointment)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            start_time = st.slider(label="–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–µ—Ö–∞—Ç—å –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç",
                                   value=datetime(2025, 1, 1, 9, 30),
                                   format="MM/DD/YY - hh:mm",
                                   )
            st.write("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞:", start_time)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.18":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.18 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            from datetime import datetime

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text('–í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã st.date_input')

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            d = st.date_input(label="–î–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
                              value=datetime(2019, 7, 6),
                              format='DD/MM/YYYY')
            st.write("–í—ã —Ä–æ–¥–∏–ª–∏—Å—å:", d)
            st.divider()  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è

            # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            today = datetime.now()
            # —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            next_year = today.year + 1
            # 1 —è–Ω–≤–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
            jan_1 = datetime(next_year, 1, 1)
            # 31 –¥–µ–∫–∞–±—Ä—è —è–Ω–≤–∞—Ä—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
            dec_31 = datetime(next_year, 12, 31)
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç
            d1 = st.date_input(label="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ –æ—Ç–ø—É—Å–∫",
                               value=(jan_1, datetime(next_year, 1, 14)),
                               min_value=jan_1,
                               max_value=dec_31,
                               format="MM.DD.YYYY", )
            st.write("–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç:", d1)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.19":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.19 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text('–í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ st.time_input')

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º 15 –º–∏–Ω
            t = st.time_input(label="–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏",
                              value='now')
            st.write("–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:", t)

            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º 1 –º–∏–Ω
            t1 = st.time_input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫",
                               value=None,
                               step=60)
            st.write("–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤—Ä–µ–º—è:", t1)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.20":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.20 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text('–í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ st.text_area')

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            txt_ar = st.text_area(label="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
            if txt_ar:
                st.write("–í–≤–µ–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:", txt_ar)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.21":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.21 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            st.text('–í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ st.text_input')

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            txt = st.text_input(label="–ü–æ–ª–µ –¥–ª—è –≤–æ–¥–∞ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            if txt:
                st.write("–í–≤–µ–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:", txt)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.22":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.22 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            import pandas as pd
            from io import StringIO

            uploaded_img = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                            type=['png', 'jpeg'])
            if uploaded_img is not None:
                file_details = {"–ò–º—è —Ñ–∞–π–ª–∞ - ": uploaded_img.name,
                                "–¢–∏–ø —Ñ–∞–π–ª–∞ - ": uploaded_img.type,
                                "–†–∞–∑–º–µ—Ä - ": uploaded_img.size}
                st.write(file_details)

            uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–æ–≤",
                                             type='csv')
            if uploaded_file is not None:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π utf-8
                stringio = StringIO(uploaded_file.getvalue().decode("utf-8"))
                st.write(stringio)

                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ "—Ñ–∞–π–ª–æ–≤—ã–π" –æ–±—ä–µ–∫—Ç
                dataframe = pd.read_csv(uploaded_file)
                st.write(dataframe)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.23":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.23 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            st.text("–í–∏–¥–∂–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
            st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å, –∞ –∑–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ")

            audio = st.audio_input("–í–∏–¥–∂–µ—Ç –¥–ª—è –∑–≤—É–∫–æ–∑–∞–ø–∏—Å–∏",
                                   help='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏. '
                                        '–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –µ—â–µ —Ä–∞–∑')
            if audio:
                with open("audio.wav", "wb") as f:
                    f.write(audio.getbuffer())
                    st.write("–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 3.24":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 3.24 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st

            enable = st.checkbox("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É")
            video = st.camera_input("–ü–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫", disabled=not enable)

            if video:
                st.image(video)
