import streamlit as st

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ì–ª–∞–≤–∞ 8", # –¢–µ–∫—Å—Ç –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
    page_icon='üìï',       # –ò–∫–æ–Ω–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
    layout="wide",        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initial_sidebar_state="collapsed",  # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
)

# –¢–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.columns(3)[1].header("üë©üèª‚Äçüíª–ü—Ä–∏–º–µ—Ä—ã –≥–ª–∞–≤—ã 8")

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
cont_1 = st.container(width=300)
with cont_1:
    # –†–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π—Å—è —Å–ø–∏—Å–æ–∫
    options = st.selectbox("–õ–∏—Å—Ç–∏–Ω–≥–∏ –≥–ª–∞–≤—ã 6",
        ("–õ–∏—Å—Ç–∏–Ω–≥ 8.1", "–õ–∏—Å—Ç–∏–Ω–≥ 8.2", "–õ–∏—Å—Ç–∏–Ω–≥ 8.3", "–õ–∏—Å—Ç–∏–Ω–≥ 8.4",
         "–õ–∏—Å—Ç–∏–Ω–≥ 8.5", "–õ–∏—Å—Ç–∏–Ω–≥ 8.6", "–õ–∏—Å—Ç–∏–Ω–≥ 8.7", "–õ–∏—Å—Ç–∏–Ω–≥ 8.8",
         "–õ–∏—Å—Ç–∏–Ω–≥ 8.9", "–õ–∏—Å—Ç–∏–Ω–≥ 8.10", "–õ–∏—Å—Ç–∏–Ω–≥ 8.11", "–õ–∏—Å—Ç–∏–Ω–≥ 8.12"),
        index=None,
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç–∏–Ω–≥..."
    )

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
cont_2 = st.container()
with cont_2:
    if options is None:
        st.write('–õ–∏—Å—Ç–∏–Ω–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω')
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.1":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.1 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import pandas as pd
            import streamlit as st
            from numpy.random import default_rng as rng
            from vega_datasets import data

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            df = pd.DataFrame(rng(0).standard_normal((20, 3)), columns=["a", "b", "c"])

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ st.area_chart —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
            st.area_chart(df)

            df = pd.DataFrame(
                {
                    "col1": list(range(20)) * 3,
                    "col2": rng(0).standard_normal(60),
                    "col3": ["a"] * 20 + ["b"] * 20 + ["c"] * 20,
                }
            )

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ st.area_chart —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ x, y –∏ color')
            st.area_chart(df, x="col1", y="col2", color="col3")

            df = data.unemployment_across_industries()
            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ st.area_chart —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ x, y, color,stack')
            st.area_chart(df, x="date", y="count", color="series", stack="center")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.2":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.2 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            import pandas as pd

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            # –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            data = pd.DataFrame({
                '–§—Ä—É–∫—Ç—ã': ['–Ø–±–ª–æ–∫–∏', '–ì—Ä—É—à–∏', '–ë–∞–Ω–∞–Ω—ã', '–ê–ø–µ–ª—å—Å–∏–Ω—ã'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [15, 35, 25, 45]
            })

            st.write('–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ st.bar_chart')
            st.bar_chart(data, x='–§—Ä—É–∫—Ç—ã', y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.3":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.3 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            import pandas as pd

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            # –°–æ–∑–¥–∞—Ç—å dataframe
            df = pd.DataFrame({'–ì–æ–¥—ã': ['2018', '2019', '2020', '2021'],
                               '–ü—Ä–æ–¥–∞–∂–∏': [350, 480, 550, 680]}
                              )
            # –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É
            st.write('–õ–∏–Ω–µ–π–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ st.line_chart')
            st.line_chart(df, x='–ì–æ–¥—ã', y='–ü—Ä–æ–¥–∞–∂–∏',
                          x_label='–ì–æ–¥—ã', y_label='–ü—Ä–æ–¥–∞–∂–∏')
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.4":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.4 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import pandas as pd
            import streamlit as st
            from numpy.random import default_rng as rng

            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –≤ —Ä–∞–π–æ–Ω–µ –≥. –ú–æ—Å–∫–≤–∞
            df = pd.DataFrame(
                rng(0).standard_normal((100, 2)) / [50, 50] + [55.7522, 37.6156],
                columns=["lat", "lon"],
            )
            st.write('–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –≥. –ú–æ—Å–∫–≤–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º st.map_chart')
            st.map(df)

            df = pd.DataFrame(
                {
                    "col1": rng(0).standard_normal(100) / 50 + 55.7522,
                    "col2": rng(1).standard_normal(100) / 50 + 37.6156,
                    "col3": rng(2).standard_normal(100) * 100,
                    "col4": rng(3).standard_normal((100, 4)).tolist(),
                }
            )
            st.write('–ö–∞—Ä—Ç–∞ –≥. –ú–æ—Å–∫–≤–∞ —Å —Ç–æ—á–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤')
            st.map(df, latitude="col1", longitude="col2", size="col3", color="col4")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.5":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.5 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import pandas as pd
            import streamlit as st
            from numpy.random import default_rng as rng

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            df = pd.DataFrame(rng(0).standard_normal((10, 3)), columns=["a", "b", "c"])

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ st.scatter_chart —Å —Ç–æ—á–∫–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ü–≤–µ—Ç–∞')
            st.scatter_chart(df)

            df = pd.DataFrame(
                rng(0).standard_normal((20, 3)), columns=["col1", "col2", "col3"]
            )
            df["col4"] = rng(0).choice(["a", "b", "c"], 20)

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ st.scatter_chart —Å —Ç–æ—á–∫–∞–º–∏ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ü–≤–µ—Ç–∞')
            st.scatter_chart(df,
                             x="col1",
                             y="col2",
                             color="col4",
                             size="col3")
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.6":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.6 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            import altair as alt
            from vega_datasets import data
            import pandas as pd
            from numpy.random import default_rng as rng

            # –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö Pandas
            df = pd.DataFrame(rng(0).standard_normal((60, 3)), columns=["a", "b", "c"])

            # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ altair
            chart = (
                alt.Chart(df)
                .mark_circle()
                .encode(x="a", y="b", size="c", color="c", tooltip=["a", "b", "c"])
            )
            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ altair_chart —Å —Ç–µ–º–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
            st.altair_chart(chart)

            # –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ vega_datasets
            source = data.cars()

            # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ altair
            chart = (alt.Chart(source).mark_circle().encode(
                x=alt.X('Horsepower',
                        title='–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å)'),
                y=alt.Y('Miles_per_Gallon',
                        title='–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–º–∏–ª–∏/–≥–∞–ª–æ–Ω)'),
                color='Origin', )
                     .interactive())

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ altair_chart —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏')

            # –í–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            tab1, tab2 = st.tabs(["–¢–µ–º–∞ Streamlit (default)", "–¢–µ–º–∞ Altair"])
            with tab1:
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å —Ç–µ–º–æ–π Streamlit (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
                st.altair_chart(chart, theme="streamlit", use_container_width=True)
            with tab2:
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å –Ω–∞—Ç–∏–≤–Ω–æ–π —Ç–µ–º–æ–π Altair
                st.altair_chart(chart, theme=None, use_container_width=True)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.7":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.7 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            from bokeh.plotting import figure

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            x = [1, 2, 3, 4, 5]
            y = [2, 4, 8, 16, 32]

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Bokeh
            p = figure(title="–ì—Ä–∞—Ñ–∏–∫ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Bokeh",
                       x_axis_label="–û—Å—å x",
                       y_axis_label="–û—Å—å y")
            p.line(x, y, legend_label="–¢—Ä–µ–Ω–¥", line_width=2)

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º st.bokeh_chart')
            st.bokeh_chart(p)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.8":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.8 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import streamlit as st
            import graphviz

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            st.write('–ì—Ä–∞—Ñ—ã —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º st.graphviz_chart')

            # –ì—Ä–∞—Ñ - —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, –∫–∞–∫ –æ–±—ä–µ–∫—Ç
            graph = graphviz.Digraph()
            graph.edge("–Ø", "–ú–∞—Ç—å")
            graph.edge("–Ø", "–û—Ç–µ—Ü")
            graph.edge("–ë—Ä–∞—Ç", "–ú–∞—Ç—å")
            graph.edge("–ë—Ä–∞—Ç", "–û—Ç–µ—Ü")
            graph.edge("–ú–∞—Ç—å", "–ë–∞–±—É—à–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏")
            graph.edge("–ú–∞—Ç—å", "–î–µ–¥—É—à–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏")
            graph.edge("–û—Ç–µ—Ü", "–ë–∞–±—É—à–∫–∞ –ø–æ –æ—Ç—Ü—É")
            graph.edge("–û—Ç–µ—Ü", "–î–µ–¥—É—à–∫–∞ –ø–æ –æ—Ç—Ü—É")
            graph.edge("–°–µ—Å—Ç—Ä–∞", "–ë–∞–±—É—à–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏")
            graph.edge("–°–µ—Å—Ç—Ä–∞", "–ë–∞–±—É—à–∫–∞ –ø–æ –æ—Ç—Ü—É")

            # –í–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            tab1, tab2 = st.tabs(["–ì—Ä–∞—Ñ 1", "–ì—Ä–∞—Ñ 2"])

            with tab1:
                st.write('–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏')
                st.graphviz_chart(graph)

            with tab2:
                st.write('–ö–æ–ª—å—Ü–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –∞–≤—Ç–æ–±—É—Å–∞')
                # –ì—Ä–∞—Ñ –∫–æ–ª—å—Ü–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç, –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                st.graphviz_chart('''
                    digraph {
                        –í–æ–∫–∑–∞–ª -> –ú–∞–≥–∞–∑–∏–Ω
                        –ê–ø—Ç–µ–∫–∞ -> –í–æ–∫–∑–∞–ª
                        –ú–∞–≥–∞–∑–∏–Ω -> –†—ã–Ω–æ–∫            
                        –†—ã–Ω–æ–∫ -> –°—Ç–∞–¥–∏–æ–Ω
                        –°—Ç–∞–¥–∏–æ–Ω -> –®–∫–æ–ª–∞
                        –®–∫–æ–ª–∞ -> –ú–∞–≥–∞–∑–∏–Ω
                        –ú–∞–≥–∞–∑–∏–Ω -> –ê–ø—Ç–µ–∫–∞                
                    }
                ''')
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.9":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.9 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import plotly.graph_objects as go
            import plotly.figure_factory as ff
            import streamlit as st
            from numpy.random import default_rng as rng

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Plotly
            fig = go.Figure()
            fig.add_trace(
                go.Scatter(
                    x=[1, 2, 3, 4, 5],
                    y=[1, 3, 2, 5, 4]
                )
            )
            st.write('–ì—Ä–∞—Ñ–∏–∫ plotly.graph_objects —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º st.plotly_chart')
            st.plotly_chart(fig, config={'scrollZoom': False})

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = [
                rng(0).standard_normal(200) - 2,
                rng(1).standard_normal(200),
                rng(2).standard_normal(200) + 2,
            ]
            group_labels = ["Group 1", "Group 2", "Group 3"]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Plotly
            fig = ff.create_distplot(data,
                                     group_labels,
                                     bin_size=[0.1, 0.25, 0.5]
                                     )
            st.write('–ì—Ä–∞—Ñ–∏–∫ plotly.figure_factory —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º st.plotly_chart')
            st.plotly_chart(fig)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.10":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.10 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import pandas as pd
            import pydeck as pdk
            import streamlit as st
            from numpy.random import default_rng as rng

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            df = pd.DataFrame(
                rng(0).standard_normal((100, 2)) / [60, 60] + [55.7522, 37.6156],
                columns=["lat", "lon"])

            # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç pydeck
            fig = pdk.Deck(
                map_style=None,  # –¢–µ–º–∞ Streamlit
                initial_view_state=pdk.ViewState(
                    latitude=55.7522,
                    longitude=37.6156,
                    zoom=11,
                    pitch=50, ),
                layers=[
                    pdk.Layer(
                        "HexagonLayer",
                        data=df,
                        get_position="[lon, lat]",
                        radius=200,
                        elevation_scale=4,
                        elevation_range=[0, 500],
                        pickable=True,
                        extruded=True, ),
                    pdk.Layer(
                        "ScatterplotLayer",
                        data=df,
                        get_position="[lon, lat]",
                        get_color="[200, 30, 0, 160]",
                        get_radius=200, ),
                ],
            )

            st.write('–ö–∞—Ä—Ç–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π pydeck –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–º st.pydeck_chart')
            st.pydeck_chart(fig)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.11":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.11 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import matplotlib.pyplot as plt
            import streamlit as st
            from numpy.random import default_rng as rng

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            data = rng(0).normal(1, 1, size=100)
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å matplotlib
            fig, ax = plt.subplots()
            ax.hist(data, bins=20)

            st.write('–ì—Ä–∞—Ñ–∏–∫ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π matplotlib')
            st.pyplot(fig)
    elif options == "–õ–∏—Å—Ç–∏–Ω–≥ 8.12":
        st.write('–ö–æ–¥ –ª–∏—Å—Ç–∏–Ω–≥–∞ 8.12 –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        with st.echo(code_location="above"):
            import pandas as pd
            import streamlit as st
            from numpy.random import default_rng as rng
            from vega_datasets import data

            # –°–∫—Ä—ã—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            st.set_page_config(initial_sidebar_state="collapsed")

            df = pd.DataFrame(rng(0).standard_normal((60, 3)), columns=["a", "b", "c"])

            v_spec = {
                "mark": {"type": "circle", "tooltip": True},
                "encoding": {
                    "x": {"field": "a", "type": "quantitative"},
                    "y": {"field": "b", "type": "quantitative"},
                    "size": {"field": "c", "type": "quantitative"},
                    "color": {"field": "c", "type": "quantitative"},
                },
            }

            st.write('–ì—Ä–∞—Ñ–∏–∫ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Vega-Lite –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–º st.vega_lite_chart')
            st.vega_lite_chart(df, v_spec)

            # –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ vega_datasets
            source = data.cars()

            # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Vega-Lite
            chart = {
                "mark": "point",
                "encoding": {
                    "x": {
                        "field": "Horsepower",
                        "type": "quantitative",
                        "title": "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)",
                    },
                    "y": {
                        "field": "Miles_per_Gallon",
                        "type": "quantitative",
                        "title": "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–º–∏–ª–∏/–≥–∞–ª–æ–Ω)",
                    },
                    "color": {"field": "Origin", "type": "nominal"},
                    "shape": {"field": "Origin", "type": "nominal"},
                },
            }

            st.write('–î–∏–∞–≥—Ä–∞–º–º–∞ Vega-Lite —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏')

            tab1, tab2 = st.tabs(["–¢–µ–º–∞ Streamlit (default)", "–ù–∞—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞ Vega-Lite"])

            with tab1:
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å —Ç–µ–º–æ–π Streamlit (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
                st.vega_lite_chart(source,
                                   chart,
                                   theme="streamlit",
                                   use_container_width=True)
            with tab2:
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å –Ω–∞—Ç–∏–≤–Ω–æ–π —Ç–µ–º–æ–π Vega-Lite
                st.vega_lite_chart(source,
                                   chart,
                                   theme=None,
                                   use_container_width=True)
                